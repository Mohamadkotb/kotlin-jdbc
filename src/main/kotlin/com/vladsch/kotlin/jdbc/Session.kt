package com.vladsch.kotlin.jdbc

import java.sql.CallableStatement
import java.sql.PreparedStatement
import java.sql.ResultSet
import javax.json.JsonArray
import javax.json.JsonObject

interface Session : AutoCloseable {
    val connection: Connection
    val autoGeneratedKeys: List<String>

    fun use(block: (Session) -> Unit)
    fun prepare(query: SqlQuery, returnGeneratedKeys: Boolean = false): PreparedStatement
    fun <A> query(query: SqlQuery, consumer: (ResultSet) -> A): A
    fun <A> executeWithKeys(query: SqlQuery, consumer: (PreparedStatement) -> A): A?
    fun <A> execute(query: SqlQuery, consumer: (PreparedStatement) -> A): A?
    fun <A> updateWithKeys(query: SqlQuery, consumer: (PreparedStatement) -> A): A?
    fun <A> update(query: SqlQuery, consumer: (PreparedStatement) -> A): A?
    fun <A> list(query: SqlQuery, extractor: (Row) -> A): List<A>
    fun jsonArray(query: SqlQuery, extractor: (Row) -> JsonObject): JsonArray
    fun count(query: SqlQuery): Int
    fun <A> first(query: SqlQuery, extractor: (Row) -> A): A?
    fun <K, A> hashMap(query: SqlQuery, keyExtractor: (Row) -> K, extractor: (Row) -> A): Map<K, A>
    fun jsonObject(query: SqlQuery, keyExtractor: (Row) -> String, extractor: (Row) -> JsonObject): JsonObject
    fun forEach(query: SqlQuery, operator: (Row) -> Unit): Unit
    fun forEach(query: SqlCall, stmtProc: (CallableStatement) -> Unit, operator: (rs: ResultSet, index: Int) -> Unit): Unit
    fun execute(query: SqlQuery): Boolean
    fun update(query: SqlQuery): Int
    fun updateGetLongId(query: SqlQuery): Long?
    fun updateGetId(query: SqlQuery): Int?
    fun <A> updateGetKey(query: SqlQuery, extractor: (Row) -> A): A?
    fun updateGetLongIds(query: SqlQuery): List<Long>?
    fun updateGetIds(query: SqlQuery): List<Int>?
    fun <A> updateGetKeys(query: SqlQuery, extractor: (Row) -> A): List<A>?
    fun <A> transaction(operation: (Transaction) -> A): A

    override fun close()
}
